!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARG_PARSE_H	parse_flags.h	2;"	d
BBTREE_UTILS_H	libft/includes/bbtree_utils.h	14;"	d
BUFF_SIZE	libft/includes/get_next_line.h	23;"	d
COMPARATORS_H	comparators.h	2;"	d
CRUTCH_FLOAT_PRECISION_CONSTANT	libft/ftoa/ft_fp.h	17;"	d
DEPTH	libft/includes/get_next_line.h	31;"	d
ERRORS_H	errors.h	2;"	d
FILESORT_H	filesort.h	2;"	d
FILE_INFO_H	file_info.h	2;"	d
FS_UTILS_H	fs_utils.h	2;"	d
FT_FP_H	libft/ftoa/ft_fp.h	14;"	d
GET_NEXT_LINE_H	libft/includes/get_next_line.h	14;"	d
HALF_OF_THE_YEAR	file_info.h	58;"	d
LD_MAX_DIGITS	libft/ftoa/ft_fp.h	16;"	d
LIBFT_H	libft/includes/libft.h	14;"	d
MAX_DIGITS	libft/ft_itoa_base.c	19;"	d	file:
MAX_OPEN_FILES	libft/includes/get_next_line.h	20;"	d
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAME	libft/ftoa/Makefile	/^NAME =  ftoa.o$/;"	m
OFFSETS_H	offsets.h	2;"	d
PRINT_UTILS_H	print_utils.h	2;"	d
QSORT_H	qsort.h	2;"	d
QSORT_H	test_qsort/qsort.h	2;"	d
SRC	libft/Makefile	/^define SRC $/;"	m
SRC	libft/ftoa/Makefile	/^define SRC $/;"	m
abs	libft/ftoa/ftoa2.c	/^int						abs(int x)$/;"	f
add_index	libft/ft_bbtree_utils.c	/^void					**add_index(t_bbtree_node **tree, int index, int depth)$/;"	f
add_positive_decimal	libft/ftoa/decimal_arithmetic4.c	/^void		add_positive_decimal(t_decimal *a, t_decimal *b)$/;"	f
add_stat	get_stats.c	/^t_error				add_stat(t_stats *stats, t_path_stat *ps)$/;"	f
add_to_end	libft/ft_lstmap.c	/^static t_list	*add_to_end(t_list *l, t_list *new)$/;"	f	file:
adder_decimal	libft/ftoa/decimal_arithmetic4.c	/^void		adder_decimal(t_decimal *a, t_decimal *b, char *res)$/;"	f
adjust_dot_if_needed	libft/ftoa/decimal_arithmetic5.c	/^void			adjust_dot_if_needed(t_decimal *a)$/;"	f
after_dot	libft/ftoa/ft_fp.h	/^	int					after_dot;$/;"	m	struct:s_decimal
all	parse_flags.h	/^	int			all;$/;"	m	struct:s_flags
avoid_leaks	libft/ft_strsplit.c	/^static void				avoid_leaks(char **res, int nlinks)$/;"	f	file:
buff	libft/ftoa/ft_fp.h	/^	char				buff[LD_MAX_DIGITS];$/;"	m	struct:s_decimal
case_insensitive_strcmp	comparators.c	/^int		case_insensitive_strcmp(char *a, char *b)$/;"	f
choose_comparator	comparators.c	/^t_cmpf	choose_comparator(t_flags flags)$/;"	f
choose_pivot	sort_void_ptr.c	/^static void	**choose_pivot(void **arr, int len, int (*is_greater)(void *, void *))$/;"	f	file:
choose_pivot	test_qsort/sort_void_ptr.c	/^static void	**choose_pivot(void **arr, int len, int (*is_greater)(void *, void *))$/;"	f	file:
cleanup	print_dir_listing.c	/^static t_stats	*cleanup(t_stats *res, char *path)$/;"	f	file:
clear_fi_array	file_info_clear.c	/^void	clear_fi_array(t_file_info **arr, int len)$/;"	f
clear_fileinfo	file_info_clear.c	/^void	clear_fileinfo(t_file_info *f)$/;"	f
concat_and_free	libft/get_next_line.c	/^static char				*concat_and_free(t_list **l, unsigned int total_len)$/;"	f	file:
content	libft/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	libft/includes/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
copy_digits_numbers	libft/ftoa/decimal_arithmetic2.c	/^void		copy_digits_numbers(char *src, char *dst)$/;"	f
copy_from_buf	libft/ftoa/decimal_arithmetic4.c	/^void		copy_from_buf(char *buf, t_decimal *a)$/;"	f
copy_t_decimal	libft/ftoa/decimal_arithmetic5.c	/^void			copy_t_decimal(t_decimal *src, t_decimal *dst)$/;"	f
critical	errors.h	/^	critical,$/;"	e	enum:__anon1
cut_float	libft/ftoa/ftoa2.c	/^void					cut_float(t_float *num, int *power_of2)$/;"	f
data	libft/includes/get_next_line.h	/^	char		*data;$/;"	m	struct:s_unread_buff
date	file_info.h	/^	char				*date;$/;"	m	struct:s_file_info
del	rmstats.c	/^void	del(void *content, size_t content_size)$/;"	f
del_get_next	libft/ft_lstdel.c	/^static t_list	*del_get_next(t_list *l, void (*del)(void *, size_t))$/;"	f	file:
del_simple	libft/ft_del.c	/^void	del_simple(void *content, size_t content_size)$/;"	f
dirs	file_info.h	/^	t_list				*dirs;$/;"	m	struct:s_stats
end	libft/ftoa/ft_fp.h	/^	char				*end;$/;"	m	struct:s_decimal
eof	libft/includes/get_next_line.h	/^	int			eof;$/;"	m	struct:s_unread_buff
eval_power_sum	libft/ftoa/ftoa2.c	/^char					*eval_power_sum(t_float *num, int power_of2)$/;"	f
exp	libft/ftoa/ft_fp.h	/^	unsigned short		exp;$/;"	m	struct:s_float
exp_all_ones	libft/ftoa/ftoa.c	/^char		*exp_all_ones(t_float *num)$/;"	f
exp_all_zeros	libft/ftoa/ftoa.c	/^char		*exp_all_zeros(t_float *num)$/;"	f
file_type_char	file_info.c	/^char	file_type_char(struct stat sb)$/;"	f
files	file_info.h	/^	t_list				*files;$/;"	m	struct:s_stats
fill	libft/ft_itoa_base.c	/^static void	fill(char *s, long long n, char *base, int sgn)$/;"	f	file:
fill_file_info	file_info.c	/^int		fill_file_info(struct stat sb, char *path, t_file_info *fi)$/;"	f
fill_ftype	file_info.c	/^void	fill_ftype(struct stat sb, t_file_info *fi)$/;"	f
fill_offsets	offsets.c	/^void	fill_offsets(t_offsets *offs, t_file_info **info, int len)$/;"	f
fill_owner_group	file_info.c	/^int		fill_owner_group(struct stat sb, t_file_info *fi)$/;"	f
fill_prems	file_info.c	/^void	fill_prems(struct stat sb, t_file_info *fi)$/;"	f
fill_t_float	libft/ftoa/ftoa2.c	/^void					fill_t_float(long double x, t_float *num, int precision)$/;"	f
fill_time	file_info.c	/^int		fill_time(struct stat sb, t_file_info *fi)$/;"	f
format_time	file_info.c	/^void	format_time(char *s, int is_old)$/;"	f
free3	get_stats.c	/^void				free3(struct stat *a, char *b, t_path_stat *c)$/;"	f
ft_array_subtract	libft/ft_array_subtract.c	/^int	*ft_array_subtract(int *arr, unsigned int len, int number, int in_place)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int			ft_atoi(const char *str)$/;"	f
ft_bsort_int	libft/ft_bsort_int.c	/^void			ft_bsort_int(int *a, unsigned int len, int ascending)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_atoi.c	/^static int	ft_isspace(char c)$/;"	f	file:
ft_isspace	libft/ft_strtrim.c	/^static int	ft_isspace(char c)$/;"	f	file:
ft_itoa	libft/ft_itoa.c	/^char				*ft_itoa(int n)$/;"	f
ft_itoa_base	libft/ft_itoa_base.c	/^char		*ft_itoa_base(long long n, char *base, int sgn)$/;"	f
ft_itoa_stack	libft/ft_putnbr.c	/^static void			ft_itoa_stack(int n, char *s)$/;"	f	file:
ft_itoa_stack	libft/ft_putnbr_fd.c	/^static void			ft_itoa_stack(int n, char *s)$/;"	f	file:
ft_lstadd	libft/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstappend	libft/ft_lstappend.c	/^t_list	*ft_lstappend(t_list *lst, void const *content, size_t content_size)$/;"	f
ft_lstdel	libft/ft_lstdel.c	/^void			ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void*, size_t))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list			*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_max_int	libft/ft_max_int.c	/^int	*ft_max_int(int *arr, int len)$/;"	f
ft_maxval_int	libft/ft_maxval_int.c	/^int		ft_maxval_int(int *a, unsigned int len)$/;"	f
ft_memalloc	libft/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memdel	libft/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memdup	libft/ft_memdup.c	/^void	*ft_memdup(void *c, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_min_int	libft/ft_min_int.c	/^int	*ft_min_int(int *arr, int len)$/;"	f
ft_minval_int	libft/ft_minval_int.c	/^int		ft_minval_int(int *a, unsigned int len)$/;"	f
ft_print_array	libft/ft_print_array.c	/^void	ft_print_array(int *a, int len)$/;"	f
ft_printf	file_info.c	/^int	ft_printf(const char *format, ...)$/;"	f
ft_putchar	libft/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/ft_putnbr.c	/^void				ft_putnbr(int n)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void				ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(char const *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_strcat	libft/ft_strcat.c	/^char	*ft_strcat(char *dest, const char *src)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libft/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdel	libft/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_strequ	libft/ft_strequ.c	/^int	ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	libft/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t			ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmap	libft/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s,$/;"	f
ft_strncat	libft/ft_strncat.c	/^char	*ft_strncat(char *dest, const char *src, size_t n)$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/ft_strncpy.c	/^char	*ft_strncpy(char *dest, const char *src, size_t n)$/;"	f
ft_strnequ	libft/ft_strnequ.c	/^int	ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrev	libft/ft_strrev.c	/^void			ft_strrev(char *s)$/;"	f
ft_strsplit	libft/ft_strsplit.c	/^char					**ft_strsplit(char const *s, char c)$/;"	f
ft_strstr	libft/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f
ft_strsub	libft/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s)$/;"	f
ft_swap	libft/ft_swap.c	/^void	ft_swap(void *a, void *b, size_t len)$/;"	f
ft_swapint	libft/ft_swapint.c	/^void	ft_swapint(int *a, int *b)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ftoa	libft/ftoa/ftoa.c	/^char		*ftoa(long double x, int precision)$/;"	f
get_args_fileinfo	parse_args.c	/^t_file_info	**get_args_fileinfo(t_stats *stats)$/;"	f
get_dir_fileinfo	print_dir_listing.c	/^t_file_info **get_dir_fileinfo(t_stats *stats, int *len)$/;"	f
get_file_info	file_info.c	/^t_file_info		*get_file_info(t_path_stat *ps)$/;"	f
get_n_words	libft/ft_strsplit.c	/^static int				get_n_words(char const *s, char c)$/;"	f	file:
get_next_line	libft/get_next_line.c	/^int						get_next_line(const int fd, char **line)$/;"	f
group	file_info.h	/^	char				*group;$/;"	m	struct:s_file_info
group	offsets.h	/^	int			group;$/;"	m	struct:s_offsets
init_flags	parse_flags.c	/^void	init_flags(t_flags *flags)$/;"	f
init_offsets	offsets.c	/^void	init_offsets(t_offsets *o)$/;"	f
init_t_decimal	libft/ftoa/decimal_arithmetic.c	/^void			init_t_decimal(t_decimal *x)$/;"	f
insert_point	libft/ftoa/decimal_arithmetic2.c	/^void		insert_point(int after_dot, char *s)$/;"	f
inv_name_is_greater	comparators.c	/^int		inv_name_is_greater(void *a, void *b)$/;"	f
io_err	libft/includes/get_next_line.h	/^	int			io_err;$/;"	m	struct:s_unread_buff
is_greater	test_qsort/test_qsort.c	/^int	is_greater(void *a, void *b)$/;"	f
is_negative	libft/ftoa/ft_fp.h	/^	int					is_negative;$/;"	m	struct:s_decimal
is_option_arg	parse_flags.c	/^int		is_option_arg(char *arg)$/;"	f
is_upper	comparators.c	/^int		is_upper(char a)$/;"	f
is_valid_path	fs_utils.c	/^int	is_valid_path(char *path)$/;"	f
len_of_next	libft/ft_strsplit.c	/^static size_t			len_of_next(const char *src, char sep)$/;"	f	file:
long_format	parse_flags.h	/^	int			long_format;$/;"	m	struct:s_flags
main	main.c	/^int	main(int argc, char **argv)$/;"	f
main	test_qsort/test_qsort.c	/^int	main(int argc, char **argv)$/;"	f
major	file_info.h	/^	int					major;$/;"	m	struct:s_file_info
major	offsets.h	/^	int			major;$/;"	m	struct:s_offsets
mant	libft/ftoa/ft_fp.h	/^	unsigned long int	mant;$/;"	m	struct:s_float
mant_mask	libft/ftoa/ft_fp.h	/^	unsigned long int	mant_mask;$/;"	m	struct:s_float
mask_shift	libft/ftoa/ft_fp.h	/^	int					mask_shift;$/;"	m	struct:s_float
max	file_info.c	/^time_t	max(time_t a, time_t b)$/;"	f
max	libft/ftoa/decimal_arithmetic4.c	/^int			max(int a, int b)$/;"	f
min	file_info.c	/^time_t	min(time_t a, time_t b)$/;"	f
minor	file_info.h	/^	int					minor;$/;"	m	struct:s_file_info
minor	offsets.h	/^	int			minor;$/;"	m	struct:s_offsets
mul_digit	libft/ftoa/decimal_arithmetic4.c	/^void		mul_digit(t_decimal *a, t_decimal *b, \\$/;"	f
multiply_positive_decimal	libft/ftoa/decimal_arithmetic5.c	/^void			multiply_positive_decimal(t_decimal *a, t_decimal *b)$/;"	f
my_abs	libft/ft_putnbr.c	/^static int			my_abs(int n)$/;"	f	file:
my_abs	libft/ft_putnbr_fd.c	/^static int			my_abs(int n)$/;"	f	file:
n_dirs	file_info.h	/^	int					n_dirs;$/;"	m	struct:s_stats
n_files	file_info.h	/^	int					n_files;$/;"	m	struct:s_stats
n_links	offsets.h	/^	int			n_links;$/;"	m	struct:s_offsets
name_is_greater	comparators.c	/^int		name_is_greater(void *a, void *b)$/;"	f
nbytes	libft/includes/get_next_line.h	/^	int			nbytes;$/;"	m	struct:s_unread_buff
nchar_after_dot	libft/ftoa/decimal_arithmetic2.c	/^int			nchar_after_dot(char *s)$/;"	f
ndigits	libft/ftoa/decimal_arithmetic2.c	/^int			ndigits(char *s)$/;"	f
ndigits	offsets.c	/^int		ndigits(int num)$/;"	f
new_buf	libft/get_next_line.c	/^static t_unread_buff	*new_buf(void)$/;"	f	file:
new_node	libft/ft_bbtree_utils.c	/^static t_bbtree_node	*new_node(void)$/;"	f	file:
next	libft/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next_level	libft/ft_bbtree_utils.c	/^static t_bbtree_node	*next_level(t_bbtree_node *current, int direction)$/;"	f	file:
nl_found	libft/includes/get_next_line.h	/^	int			nl_found;$/;"	m	struct:s_unread_buff
nlinks	file_info.h	/^	int					nlinks;$/;"	m	struct:s_file_info
normal_case	libft/ftoa/ftoa.c	/^char		*normal_case(t_float *num)$/;"	f
not_critical	errors.h	/^	not_critical$/;"	e	enum:__anon1
offs_crutch	print_file_info.c	/^static void	offs_crutch(int is_int, void *arg, int offset)$/;"	f	file:
ok	errors.h	/^	ok, $/;"	e	enum:__anon1
one	libft/includes/bbtree_utils.h	/^	void				*one;$/;"	m	struct:s_bbtree_node
our_abs	libft/ft_itoa_base.c	/^static int	our_abs(int n)$/;"	f	file:
owner	file_info.h	/^	char				*owner;$/;"	m	struct:s_file_info
owner	offsets.h	/^	int			owner;$/;"	m	struct:s_offsets
parse_args	parse_args.c	/^t_stats	*parse_args(t_flags *flags, int argc, char **argv)$/;"	f
parse_dir	print_dir_listing.c	/^t_stats	*parse_dir(t_flags flags, DIR *d, char *path)$/;"	f
path	file_info.h	/^	char				*path;$/;"	m	struct:s_path_stat
path_append	print_dir_listing.c	/^char	*path_append(char *path, char *name)$/;"	f
pathname	file_info.h	/^	char				*pathname;$/;"	m	struct:s_file_info
perms	file_info.h	/^	char				perms[10];$/;"	m	struct:s_file_info
place_pivot	sort_void_ptr.c	/^static void	**place_pivot(void **arr, int len, int (*is_greater)(void *, void *), void **pivot)$/;"	f	file:
place_pivot	test_qsort/sort_void_ptr.c	/^static void	**place_pivot(void **arr, int len, int (*is_greater)(void *, void *), void **pivot)$/;"	f	file:
pop_dir	get_stats.c	/^t_file_info			*pop_dir(t_stats *stats)$/;"	f
pop_file	get_stats.c	/^t_file_info			*pop_file(t_stats *stats)$/;"	f
pos	libft/includes/get_next_line.h	/^	int			pos;$/;"	m	struct:s_unread_buff
positive_ascii_to	libft/ftoa/decimal_arithmetic3.c	/^void		positive_ascii_to(t_decimal *repr, char *s)$/;"	f
power_positive_decimal	libft/ftoa/decimal_arithmetic.c	/^void			power_positive_decimal(t_decimal *x, int pow)$/;"	f
precision	libft/ftoa/ft_fp.h	/^	int					precision;$/;"	m	struct:s_float
print_args	test_qsort/test_qsort.c	/^void	print_args(int argc, char **argv)$/;"	f
print_dir_listing	print_dir_listing.c	/^void	print_dir_listing(t_flags flags, char *path)$/;"	f
print_list_files	print_file_info.c	/^void	print_list_files(t_flags flags, t_file_info **fi, int len)$/;"	f
print_n_spaces	print_file_info.c	/^void	print_n_spaces(int n)$/;"	f
print_single_file_l	print_file_info.c	/^int		print_single_file_l(t_file_info *fi, t_offsets *offs)$/;"	f
print_subdirs	print_dir_listing.c	/^void	print_subdirs(t_flags flags, t_stats *stats, char *path)$/;"	f
push	get_stats.c	/^t_error				push(t_stats *stats, char *path)$/;"	f
put_max_first	libft/ft_bsort_int.c	/^static void		put_max_first(int *a, unsigned int len)$/;"	f	file:
put_min_first	libft/ft_bsort_int.c	/^static void		put_min_first(int *a, unsigned int len)$/;"	f	file:
qsort_void_ptr	sort_void_ptr.c	/^void	qsort_void_ptr(void **arr, int len, int (*is_greater)(void *, void *))$/;"	f
qsort_void_ptr	test_qsort/sort_void_ptr.c	/^void	qsort_void_ptr(void **arr, int len, int (*is_greater)(void *, void *))$/;"	f
read_option_arg	parse_flags.c	/^int		read_option_arg(char *arg, t_flags *flags)$/;"	f
recursive	parse_flags.h	/^	int			recursive;$/;"	m	struct:s_flags
remove_newline	file_info.c	/^void	remove_newline(char *s)$/;"	f
remove_weekday	file_info.c	/^void	remove_weekday(char *s)$/;"	f
reverse	parse_flags.h	/^	int			reverse;$/;"	m	struct:s_flags
rmstats	rmstats.c	/^void	rmstats(t_stats *stats, void (*del)(void *, size_t))$/;"	f
s_bbtree_node	libft/includes/bbtree_utils.h	/^typedef	struct			s_bbtree_node$/;"	s
s_decimal	libft/ftoa/ft_fp.h	/^typedef struct			s_decimal$/;"	s
s_file_info	file_info.h	/^typedef struct			s_file_info$/;"	s
s_flags	parse_flags.h	/^typedef struct	s_flags$/;"	s
s_float	libft/ftoa/ft_fp.h	/^typedef struct			s_float$/;"	s
s_len	offsets.c	/^int		s_len(char *s)$/;"	f
s_list	libft/includes/libft.h	/^typedef struct		s_list$/;"	s
s_offsets	offsets.h	/^typedef struct	s_offsets$/;"	s
s_path_stat	file_info.h	/^typedef struct			s_path_stat$/;"	s
s_stats	file_info.h	/^typedef struct			s_stats$/;"	s
s_unread_buff	libft/includes/get_next_line.h	/^typedef struct	s_unread_buff$/;"	s
sb	file_info.h	/^	struct stat			*sb;$/;"	m	struct:s_path_stat	typeref:struct:s_path_stat::stat
seek_nl	libft/get_next_line.c	/^static int				seek_nl(t_unread_buff *buff, int fd, t_list **l)$/;"	f	file:
shift_excessive_digits	libft/ftoa/decimal_arithmetic3.c	/^int			shift_excessive_digits(t_decimal *a, t_decimal *b, char *tmp)$/;"	f
sign	libft/ftoa/ft_fp.h	/^	unsigned short		sign;$/;"	m	struct:s_float
single_digit_a	libft/ftoa/decimal_arithmetic3.c	/^void		single_digit_a(t_decimal *a, char **res, int *carry)$/;"	f
single_digit_b	libft/ftoa/decimal_arithmetic3.c	/^void		single_digit_b(t_decimal *b, char **res, int *carry)$/;"	f
single_digit_both	libft/ftoa/decimal_arithmetic3.c	/^void		single_digit_both(t_decimal *a, t_decimal *b, \\$/;"	f
size	file_info.h	/^	unsigned long long	size;$/;"	m	struct:s_file_info
size	offsets.h	/^	int			size;$/;"	m	struct:s_offsets
sort_by_time	parse_flags.h	/^	int			sort_by_time;$/;"	m	struct:s_flags
sort_fileinfo	filesort.c	/^void	sort_fileinfo(t_flags flags, int n, t_file_info **info)$/;"	f
square_positive_decimal	libft/ftoa/decimal_arithmetic.c	/^void			square_positive_decimal(t_decimal *x)$/;"	f
start	libft/ftoa/ft_fp.h	/^	char				*start;$/;"	m	struct:s_decimal
start_of_next	libft/ft_strsplit.c	/^static const char		*start_of_next(const char *s, char sep)$/;"	f	file:
str_rev	libft/ft_putnbr.c	/^static void			str_rev(char *s)$/;"	f	file:
str_rev	libft/ft_putnbr_fd.c	/^static void			str_rev(char *s)$/;"	f	file:
swap	sort_void_ptr.c	/^static void	swap(void **a, void **b)$/;"	f	file:
swap	test_qsort/sort_void_ptr.c	/^static void	swap(void **a, void **b)$/;"	f	file:
t_bbtree_node	libft/includes/bbtree_utils.h	/^}						t_bbtree_node;$/;"	t	typeref:struct:s_bbtree_node
t_cmpf	filesort.h	/^typedef int		(*t_cmpf)(void *a, void *b);$/;"	t
t_decimal	libft/ftoa/ft_fp.h	/^}						t_decimal;$/;"	t	typeref:struct:s_decimal
t_error	errors.h	/^}		t_error;$/;"	t	typeref:enum:__anon1
t_file_info	file_info.h	/^}						t_file_info;$/;"	t	typeref:struct:s_file_info
t_flags	parse_flags.h	/^}				t_flags;$/;"	t	typeref:struct:s_flags
t_float	libft/ftoa/ft_fp.h	/^}						t_float;$/;"	t	typeref:struct:s_float
t_list	libft/includes/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_offsets	offsets.h	/^}				t_offsets;$/;"	t	typeref:struct:s_offsets
t_path_stat	file_info.h	/^}						t_path_stat;$/;"	t	typeref:struct:s_path_stat
t_stats	file_info.h	/^}						t_stats;$/;"	t	typeref:struct:s_stats
t_unread_buff	libft/includes/get_next_line.h	/^}				t_unread_buff;$/;"	t	typeref:struct:s_unread_buff
time_is_greater	comparators.c	/^int		time_is_greater(void *a, void *b)$/;"	f
time_is_not_grater	comparators.c	/^int		time_is_not_grater(void *a, void *b)$/;"	f
timestamp	file_info.h	/^	time_t				timestamp;$/;"	m	struct:s_file_info
to_ascii	libft/ftoa/decimal_arithmetic2.c	/^int			to_ascii(t_decimal repr, char *s)$/;"	f
to_lower	comparators.c	/^char	to_lower(char a)$/;"	f
try_buffer	libft/get_next_line.c	/^static size_t			try_buffer(t_unread_buff *buff, t_list **l)$/;"	f	file:
type	file_info.h	/^	char				type;$/;"	m	struct:s_file_info
zero	libft/includes/bbtree_utils.h	/^	void				*zero;$/;"	m	struct:s_bbtree_node
